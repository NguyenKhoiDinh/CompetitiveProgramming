#include <bits/stdc++.h>
using namespace std;

#define int long long
const int M = 998244353;

string solve1(string s, int k) {
	if (s.size() == 1) {
		if (s[0] == '?') {
			s[0] = '0' + k;
		}
		return s;
	}

	// last: 2? --> last digit is 6 to 1
	// last: x? --> last digit is 9 to 1
	// last: ?? --> 26 to 21, 19 to 11
	int n = s.size();
	for (int i = n-2; i >= 0; i--) {
		if (s[i] == '?' && s[i+1] <= '9' && s[i+1] >= '7') {
			s[i] = '1';
		}
	}

	k--;
	if (s[n-1] == '?') {
		if (s[n-2] == '2') {
			int md = k % 6;
			k /= 6;
			s[n-1] = '0' + (6 - md);
		} else if (s[n-2] != '?') {
			int md = k % 9;
			k /= 9;
			s[n-1] = '0' + (9 - md);
		} else {
			int md = k % 15;
			k /= 15;
			if (md <= 5) {
				s[n-2] = '2';
				s[n-1] = '0' + (6 - md);
			} else {
				md -= 5;
				s[n-2] = '1';
				s[n-1] = '0' + (9 - md);
			}
		}
	}

	for (int i = n-1; i >= 0; i--) {
		if (s[i] == '?') {
			if (k % 2) {
				s[i] = '1';
			} else {
				s[i] = '2';
			}
			k /= 2;
		}
	}

	return s;
}

int solve2(string s) {
	int n = s.size();
	vector<int> dp(n+1);
	dp[0] = 1;
	for (int i = 0; i < n; i++) {
		if (s[i] != '0') {
			dp[i+1] += dp[i];
			dp[i+1] %= M;
		}
		if (i+1 < n) {
			if (s[i] == '2' && s[i+1] >= '0' && s[i+1] <= '6') {
				dp[i+2] += dp[i];
				dp[i+2] %= M;
			} else if (s[i] == '1' && s[i+1] >= '0' && s[i+1] <= '9') {
				dp[i+2] += dp[i];
				dp[i+2] %= M;
			}
		}
	}
	//cout << '\n';
	//for (int i: dp) cout << i << ' ';
	//cout << '\n';
	return dp[n];
}

void solve() {
	
	string s; int k; cin >> s >> k;
	int n = s.size();

	s = solve1(s, k);
	int res = solve2(s);
	cout << s << ' ' << res << '\n';

}

signed main() {
	ios::sync_with_stdio(0); cin.tie(0);
	
	double TT1 = clock();

	int t; cin >> t;
	for (int i = 1; i <= t; i++) {
		double t1 = clock();

		cout << "Case #" << i << ": ";
		solve();

		double t2 = clock();
		cerr << fixed << setprecision(3) << "Finished case #" << i << ". Time elapsed: " << (t2-t1)/(CLOCKS_PER_SEC) << "s\n";
	}

	double TT2 = clock();
	cerr << fixed << setprecision(3) << "Total time: " << (TT2-TT1)/(CLOCKS_PER_SEC) << "s\n";
	
	return 0;
}
